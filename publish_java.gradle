apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

static def userForeignWarehouse() {
    def currentFlavor = System.getProperty("UNIONTYPE")
    if (currentFlavor == null) {
        return false
    }
    def userForeignWarehouseList = System.getProperty("USE_FOREIGN_WAREHOUSE", "").split(",")
    if (userForeignWarehouseList.contains(currentFlavor)) {
        return true
    }
    return false
}

def getReleaseRepositoryUrl() {
    if (userForeignWarehouse()) {
        return "http://nexus.union.yy.com:8081/nexus/content/repositories/union-baidu-releases/"
    }
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    if (userForeignWarehouse()) {
        return "http://nexus.union.yy.com:8081/nexus/content/repositories/union-baidu-snapshots/"
    }
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def getRepositoryUsername() {
    if (userForeignWarehouse()) {
        return "union-development"
    }
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    if (userForeignWarehouse()) {
        return "QXF6G0TdkaaJ8YYvZ3yjcqnF"
    }
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

group = publish_groupId

//task androidJavadocs(type: Javadoc) {
//    source = android.sourceSets.main.java.srcDirs
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//    exclude '**/*.so'
//}
//
//task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
//    classifier = 'javadoc'
//    from androidJavadocs.destinationDir
//}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    if (project.hasProperty("android")) {
        from android.sourceSets.main.java.srcDirs
    }
}

task androidNativeJar(type: Jar) {
    classifier = 'so'
    from(new File(buildDir, 'libs'))
    include("**/*.so")
}

task androidNativeZip(type: Zip) {
    classifier = 'so'
    from(new File(buildDir, 'libs'))
    include("**/*.so")
}

//task gradlePluginJar(type: Copy) {
//
//    println "gradle plugin from: ${bs.list()}"
//    include("**/*.jar")
//
//    from(bs)
//}


publishing {
    repositories {
        maven {
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }

            if (isReleaseBuild()) {
                url getReleaseRepositoryUrl()
            } else {
                url getSnapshotRepositoryUrl()
            }
        }
    }
}

//Fixed Fixed gradle will package annotation class in second build;for detail see java.lang.annotation.RetentionPolicy.SOURCE
tasks.whenTaskAdded { task ->
    if (task.name == "extractReleaseAnnotations" || task.name == "extractDebugAnnotations") {
        task.outputs.upToDateWhen {false}
    }
}
